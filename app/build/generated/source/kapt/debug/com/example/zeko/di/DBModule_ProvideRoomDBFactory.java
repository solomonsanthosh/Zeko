// Generated by Dagger (https://dagger.dev).
package com.example.zeko.di;

import android.app.Application;
import com.example.zeko.data.db.ZekoDB;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DBModule_ProvideRoomDBFactory implements Factory<ZekoDB> {
  private final DBModule module;

  private final Provider<Application> contextProvider;

  public DBModule_ProvideRoomDBFactory(DBModule module, Provider<Application> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public ZekoDB get() {
    return provideRoomDB(module, contextProvider.get());
  }

  public static DBModule_ProvideRoomDBFactory create(DBModule module,
      Provider<Application> contextProvider) {
    return new DBModule_ProvideRoomDBFactory(module, contextProvider);
  }

  public static ZekoDB provideRoomDB(DBModule instance, Application context) {
    return Preconditions.checkNotNullFromProvides(instance.provideRoomDB(context));
  }
}
