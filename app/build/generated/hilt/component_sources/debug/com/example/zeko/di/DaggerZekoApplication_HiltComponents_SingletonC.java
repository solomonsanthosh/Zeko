// Generated by Dagger (https://dagger.dev).
package com.example.zeko.di;

import android.app.Activity;
import android.app.Service;
import android.content.Context;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.hilt.work.HiltWorkerFactory;
import androidx.hilt.work.HiltWrapper_WorkerFactoryModule;
import androidx.hilt.work.WorkerAssistedFactory;
import androidx.hilt.work.WorkerFactoryModule_ProvideFactoryFactory;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import androidx.work.ListenableWorker;
import androidx.work.WorkerParameters;
import com.example.zeko.data.api.PostService;
import com.example.zeko.data.datasource.PostLocalDataSource;
import com.example.zeko.data.datasource.PostRemoteDataSource;
import com.example.zeko.data.db.PostDao;
import com.example.zeko.data.db.ZekoDB;
import com.example.zeko.data.repository.PostRepository;
import com.example.zeko.data.usecase.getPostsUseCase;
import com.example.zeko.data.usecase.getScheduledPostUseCase;
import com.example.zeko.data.usecase.saveCommentUseCase;
import com.example.zeko.data.usecase.savePostUseCase;
import com.example.zeko.data.usecase.scedulePostUseCase;
import com.example.zeko.data.worker.ScheduledPostWorker;
import com.example.zeko.data.worker.ScheduledPostWorker_AssistedFactory;
import com.example.zeko.view.MainActivity;
import com.example.zeko.viewmodel.PostViewModel;
import com.example.zeko.viewmodel.PostViewModel_HiltModules_KeyModule_ProvideFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.ViewModelLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import dagger.internal.SingleCheck;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerZekoApplication_HiltComponents_SingletonC {
  private DaggerZekoApplication_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApiModule apiModule;

    private ApplicationContextModule applicationContextModule;

    private DBModule dBModule;

    private UseCaseModule useCaseModule;

    private repoositoryModule repoositoryModule;

    private Builder() {
    }

    public Builder apiModule(ApiModule apiModule) {
      this.apiModule = Preconditions.checkNotNull(apiModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder dBModule(DBModule dBModule) {
      this.dBModule = Preconditions.checkNotNull(dBModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_WorkerFactoryModule(
        HiltWrapper_WorkerFactoryModule hiltWrapper_WorkerFactoryModule) {
      Preconditions.checkNotNull(hiltWrapper_WorkerFactoryModule);
      return this;
    }

    public Builder useCaseModule(UseCaseModule useCaseModule) {
      this.useCaseModule = Preconditions.checkNotNull(useCaseModule);
      return this;
    }

    public Builder repoositoryModule(repoositoryModule repoositoryModule) {
      this.repoositoryModule = Preconditions.checkNotNull(repoositoryModule);
      return this;
    }

    public ZekoApplication_HiltComponents.SingletonC build() {
      if (apiModule == null) {
        this.apiModule = new ApiModule();
      }
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (dBModule == null) {
        this.dBModule = new DBModule();
      }
      if (useCaseModule == null) {
        this.useCaseModule = new UseCaseModule();
      }
      if (repoositoryModule == null) {
        this.repoositoryModule = new repoositoryModule();
      }
      return new SingletonCImpl(apiModule, applicationContextModule, dBModule, useCaseModule, repoositoryModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements ZekoApplication_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ZekoApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements ZekoApplication_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public ZekoApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements ZekoApplication_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public ZekoApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements ZekoApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public ZekoApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements ZekoApplication_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public ZekoApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements ZekoApplication_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelLifecycle viewModelLifecycle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public ViewModelCBuilder viewModelLifecycle(ViewModelLifecycle viewModelLifecycle) {
      this.viewModelLifecycle = Preconditions.checkNotNull(viewModelLifecycle);
      return this;
    }

    @Override
    public ZekoApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      Preconditions.checkBuilderRequirement(viewModelLifecycle, ViewModelLifecycle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle, viewModelLifecycle);
    }
  }

  private static final class ServiceCBuilder implements ZekoApplication_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public ZekoApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends ZekoApplication_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends ZekoApplication_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends ZekoApplication_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends ZekoApplication_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return Collections.<String>singleton(PostViewModel_HiltModules_KeyModule_ProvideFactory.provide());
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends ZekoApplication_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<PostViewModel> postViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam,
        ViewModelLifecycle viewModelLifecycleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam, viewModelLifecycleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam,
        final ViewModelLifecycle viewModelLifecycleParam) {
      this.postViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return Collections.<String, Provider<ViewModel>>singletonMap("com.example.zeko.viewmodel.PostViewModel", ((Provider) postViewModelProvider));
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.zeko.viewmodel.PostViewModel 
          return (T) new PostViewModel(singletonCImpl.provideSavePostUseCaseProvider.get(), singletonCImpl.provideGetPostUseCaseProvider.get(), singletonCImpl.provideSchedulePostUseCaseProvider.get(), singletonCImpl.provideSaveCommentUseCaseProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends ZekoApplication_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private Provider<ActivityRetainedLifecycle> provideActivityRetainedLifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideActivityRetainedLifecycleProvider = DoubleCheck.provider(new SwitchingProvider<ActivityRetainedLifecycle>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return provideActivityRetainedLifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.ActivityRetainedLifecycle 
          return (T) ActivityRetainedComponentManager_LifecycleModule_ProvideActivityRetainedLifecycleFactory.provideActivityRetainedLifecycle();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends ZekoApplication_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends ZekoApplication_HiltComponents.SingletonC {
    private final UseCaseModule useCaseModule;

    private final repoositoryModule repoositoryModule;

    private final ApiModule apiModule;

    private final DBModule dBModule;

    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<Retrofit> provideRetrofitProvider;

    private Provider<PostService> providePostServiceProvider;

    private Provider<PostRemoteDataSource> providePostRemoteDataSourceProvider;

    private Provider<ZekoDB> provideRoomDBProvider;

    private Provider<PostDao> providePostDaoProvider;

    private Provider<PostLocalDataSource> providePostLocalDataSourceProvider;

    private Provider<PostRepository> providePostRepositoryProvider;

    private Provider<getScheduledPostUseCase> provideGetScheduledPostUseCaseProvider;

    private Provider<savePostUseCase> provideSavePostUseCaseProvider;

    private Provider<ScheduledPostWorker_AssistedFactory> scheduledPostWorker_AssistedFactoryProvider;

    private Provider<getPostsUseCase> provideGetPostUseCaseProvider;

    private Provider<scedulePostUseCase> provideSchedulePostUseCaseProvider;

    private Provider<saveCommentUseCase> provideSaveCommentUseCaseProvider;

    private SingletonCImpl(ApiModule apiModuleParam,
        ApplicationContextModule applicationContextModuleParam, DBModule dBModuleParam,
        UseCaseModule useCaseModuleParam, repoositoryModule repoositoryModuleParam) {
      this.useCaseModule = useCaseModuleParam;
      this.repoositoryModule = repoositoryModuleParam;
      this.apiModule = apiModuleParam;
      this.dBModule = dBModuleParam;
      this.applicationContextModule = applicationContextModuleParam;
      initialize(apiModuleParam, applicationContextModuleParam, dBModuleParam, useCaseModuleParam, repoositoryModuleParam);

    }

    private Map<String, Provider<WorkerAssistedFactory<? extends ListenableWorker>>> mapOfStringAndProviderOfWorkerAssistedFactoryOf(
        ) {
      return Collections.<String, Provider<WorkerAssistedFactory<? extends ListenableWorker>>>singletonMap("com.example.zeko.data.worker.ScheduledPostWorker", ((Provider) scheduledPostWorker_AssistedFactoryProvider));
    }

    private HiltWorkerFactory hiltWorkerFactory() {
      return WorkerFactoryModule_ProvideFactoryFactory.provideFactory(mapOfStringAndProviderOfWorkerAssistedFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApiModule apiModuleParam,
        final ApplicationContextModule applicationContextModuleParam, final DBModule dBModuleParam,
        final UseCaseModule useCaseModuleParam, final repoositoryModule repoositoryModuleParam) {
      this.provideRetrofitProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonCImpl, 5));
      this.providePostServiceProvider = DoubleCheck.provider(new SwitchingProvider<PostService>(singletonCImpl, 4));
      this.providePostRemoteDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<PostRemoteDataSource>(singletonCImpl, 3));
      this.provideRoomDBProvider = DoubleCheck.provider(new SwitchingProvider<ZekoDB>(singletonCImpl, 8));
      this.providePostDaoProvider = DoubleCheck.provider(new SwitchingProvider<PostDao>(singletonCImpl, 7));
      this.providePostLocalDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<PostLocalDataSource>(singletonCImpl, 6));
      this.providePostRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<PostRepository>(singletonCImpl, 2));
      this.provideGetScheduledPostUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<getScheduledPostUseCase>(singletonCImpl, 1));
      this.provideSavePostUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<savePostUseCase>(singletonCImpl, 9));
      this.scheduledPostWorker_AssistedFactoryProvider = SingleCheck.provider(new SwitchingProvider<ScheduledPostWorker_AssistedFactory>(singletonCImpl, 0));
      this.provideGetPostUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<getPostsUseCase>(singletonCImpl, 10));
      this.provideSchedulePostUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<scedulePostUseCase>(singletonCImpl, 11));
      this.provideSaveCommentUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<saveCommentUseCase>(singletonCImpl, 12));
    }

    @Override
    public void injectZekoApplication(ZekoApplication zekoApplication) {
      injectZekoApplication2(zekoApplication);
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return Collections.<Boolean>emptySet();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    private ZekoApplication injectZekoApplication2(ZekoApplication instance) {
      ZekoApplication_MembersInjector.injectWorkerFactory(instance, hiltWorkerFactory());
      return instance;
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.zeko.data.worker.ScheduledPostWorker_AssistedFactory 
          return (T) new ScheduledPostWorker_AssistedFactory() {
            @Override
            public ScheduledPostWorker create(Context context, WorkerParameters workerParameters) {
              return new ScheduledPostWorker(context, workerParameters, singletonCImpl.provideGetScheduledPostUseCaseProvider.get(), singletonCImpl.provideSavePostUseCaseProvider.get());
            }
          };

          case 1: // com.example.zeko.data.usecase.getScheduledPostUseCase 
          return (T) UseCaseModule_ProvideGetScheduledPostUseCaseFactory.provideGetScheduledPostUseCase(singletonCImpl.useCaseModule, singletonCImpl.providePostRepositoryProvider.get());

          case 2: // com.example.zeko.data.repository.PostRepository 
          return (T) repoositoryModule_ProvidePostRepositoryFactory.providePostRepository(singletonCImpl.repoositoryModule, singletonCImpl.providePostRemoteDataSourceProvider.get(), singletonCImpl.providePostLocalDataSourceProvider.get(), ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          case 3: // com.example.zeko.data.datasource.PostRemoteDataSource 
          return (T) repoositoryModule_ProvidePostRemoteDataSourceFactory.providePostRemoteDataSource(singletonCImpl.repoositoryModule, singletonCImpl.providePostServiceProvider.get());

          case 4: // com.example.zeko.data.api.PostService 
          return (T) ApiModule_ProvidePostServiceFactory.providePostService(singletonCImpl.apiModule, singletonCImpl.provideRetrofitProvider.get());

          case 5: // retrofit2.Retrofit 
          return (T) ApiModule_ProvideRetrofitFactory.provideRetrofit(singletonCImpl.apiModule);

          case 6: // com.example.zeko.data.datasource.PostLocalDataSource 
          return (T) repoositoryModule_ProvidePostLocalDataSourceFactory.providePostLocalDataSource(singletonCImpl.repoositoryModule, singletonCImpl.providePostDaoProvider.get());

          case 7: // com.example.zeko.data.db.PostDao 
          return (T) DBModule_ProvidePostDaoFactory.providePostDao(singletonCImpl.dBModule, singletonCImpl.provideRoomDBProvider.get());

          case 8: // com.example.zeko.data.db.ZekoDB 
          return (T) DBModule_ProvideRoomDBFactory.provideRoomDB(singletonCImpl.dBModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule));

          case 9: // com.example.zeko.data.usecase.savePostUseCase 
          return (T) UseCaseModule_ProvideSavePostUseCaseFactory.provideSavePostUseCase(singletonCImpl.useCaseModule, singletonCImpl.providePostRepositoryProvider.get());

          case 10: // com.example.zeko.data.usecase.getPostsUseCase 
          return (T) UseCaseModule_ProvideGetPostUseCaseFactory.provideGetPostUseCase(singletonCImpl.useCaseModule, singletonCImpl.providePostRepositoryProvider.get());

          case 11: // com.example.zeko.data.usecase.scedulePostUseCase 
          return (T) UseCaseModule_ProvideSchedulePostUseCaseFactory.provideSchedulePostUseCase(singletonCImpl.useCaseModule, singletonCImpl.providePostRepositoryProvider.get());

          case 12: // com.example.zeko.data.usecase.saveCommentUseCase 
          return (T) UseCaseModule_ProvideSaveCommentUseCaseFactory.provideSaveCommentUseCase(singletonCImpl.useCaseModule, singletonCImpl.providePostRepositoryProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
